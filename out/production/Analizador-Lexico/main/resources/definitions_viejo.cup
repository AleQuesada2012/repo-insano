package main.java;
import java_cup.runtime.*;

parser code
{:
    private LexerCupV lex;
                    public Parser(LexerCupV lexer) {
                        this.lex = lexer;
                    }
                    :};

// init with {: :};

scan with {: return lex.next_token(); :};
//terminales (tokens que va a retornar el scanner)

//tipos de datos
terminal INTEGER, FLOAT, BOOL, CHAR, STRING;

// literales permitidos de los tipos existentes
terminal L_INTEGER, L_FLOAT, L_BOOL, L_CHAR, L_STRING;


//bloques de c√≥digo
terminal APERTURA_DE_BLOQUE, CIERRRE_DE_BLOQUE;

// demarcadores o separadores
terminal FIN_EXPRESION, SEPARADOR_PARAMS;


//corchetes
terminal CORCHETE_APERTURA, CORCHETE_CIERRE;


//asignacion
terminal ASIGNACION;


//Parentesis
terminal PARENTESIS_APERTURA, PARENTESIS_CIERRE;


//expresiones aritmeticas
terminal SUMA, RESTA, MULTIPLICACION, MODULO, POTENCIA;


//expresiones aritmeticas unarias
terminal INCREMENTO, DECREMENTO;


//expresiones relacionales
terminal MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL, IGUALDAD, DIFERENTE;


//expresiones logicas
terminal CONJUNCION, DISYUNCION, NEGACION;


//estructuras de control
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, DOS_PUNTOS;


//funciones de leer
terminal PRINT, READ;


//identificadores
terminal IDENTIFICADOR;


//desconocido/error
terminal ERROR;

terminal CIERRE_DE_BLOQUE;


// non-terminales
non terminal programa, sentencia, bloque, expresion;
non terminal lista_sentencias;
start with programa;




programa ::= ;
